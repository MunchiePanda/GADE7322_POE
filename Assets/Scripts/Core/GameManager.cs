using UnityEngine;
using System.Collections;

// GameManager
// -----------
// This script manages the main game loop, initializes the terrain and tower, handles wave spawning,
// tracks resources, and manages game state (start, pause, game over).
// Attach this script to an empty GameObject in your scene (e.g., GameManager).

public class GameManager : MonoBehaviour
{
    // -----------------------------
    // CONFIGURABLE FIELDS
    // -----------------------------

    [Header("References")]
    [Tooltip("Reference to the VoxelTerrainGenerator in the scene.")]
    public VoxelTerrainGenerator terrainGenerator;
    [Tooltip("Tower prefab to instantiate at the center.")]
    public GameObject towerPrefab;
    [Tooltip("Enemy prefab to spawn.")]
    public GameObject enemyPrefab;
    [Tooltip("Time (seconds) between enemy spawns in a wave.")]
    public float enemySpawnInterval = 2f;
    [Tooltip("Number of enemies in the first wave.")]
    public int initialWaveEnemyCount = 5;

    // UI References
    public HealthBarUI towerHealthBar;
    public ResourceCounterUI resourceCounterUI;
    public DefenderCostUI defenderCostUI;
    public GameOverUI gameOverUI;
    public PauseMenuUI pauseMenuUI;

    // -----------------------------
    // GAME STATE VARIABLES
    // -----------------------------

    private GameObject towerInstance;
    private int currentWave = 1;
    private int resources = 0;
    private bool isGameOver = false;
    private bool isPaused = false;

    // -----------------------------
    // UNITY LIFECYCLE
    // -----------------------------

    void Start()
    {
        // Hide UI panels that should be hidden at start
        if (gameOverUI != null)
            gameOverUI.Hide();
        if (pauseMenuUI != null)
            pauseMenuUI.Hide();

        // Step 1: Initialize the terrain (should already be generated by VoxelTerrainGenerator)
        if (terrainGenerator == null)
        {
            Debug.LogError("GameManager: No VoxelTerrainGenerator assigned!");
            return;
        }

        // Step 2: Spawn the tower at the center of the terrain
        SpawnTower();

        // Step 3: Start the first enemy wave
        StartCoroutine(SpawnWave(initialWaveEnemyCount));
    }

    void Update()
    {
        // Handle pause input (using new Input System)
        if (UnityEngine.InputSystem.Keyboard.current != null && UnityEngine.InputSystem.Keyboard.current[UnityEngine.InputSystem.Key.Escape].wasPressedThisFrame)
        {
            TogglePause();
        }
    }

    // -----------------------------
    // TOWER SPAWNING
    // -----------------------------

    void SpawnTower()
    {
        Vector3Int center = new Vector3Int(terrainGenerator.width / 2, 0, terrainGenerator.depth / 2);
        Vector3 towerPos = new Vector3(center.x, terrainGenerator.height, center.z); // Place on top of terrain
        towerInstance = Instantiate(towerPrefab, towerPos, Quaternion.identity);
    }

    // -----------------------------
    // ENEMY WAVE SPAWNING
    // -----------------------------

    IEnumerator SpawnWave(int enemyCount)
    {
        // For each path, spawn enemies at the entrance
        for (int i = 0; i < enemyCount; i++)
        {
            SpawnEnemyOnRandomPath();
            yield return new WaitForSeconds(enemySpawnInterval);
        }
        // After wave, you could start next wave or wait for player input
    }

    void SpawnEnemyOnRandomPath()
    {
        // Pick a random path entrance from the terrain generator
        if (terrainGenerator == null || terrainGenerator.numPaths == 0)
            return;
        int pathIndex = Random.Range(0, terrainGenerator.numPaths);
        var paths = terrainGenerator.GetType().GetField("paths", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).GetValue(terrainGenerator) as System.Collections.IList;
        if (paths == null || paths.Count == 0) return;
        var path = paths[pathIndex] as System.Collections.IList;
        if (path == null || path.Count == 0) return;
        Vector3Int entrance = (Vector3Int)path[0];
        Vector3 spawnPos = new Vector3(entrance.x, terrainGenerator.height, entrance.z);
        Instantiate(enemyPrefab, spawnPos, Quaternion.identity);
    }

    // -----------------------------
    // RESOURCE MANAGEMENT
    // -----------------------------

    public void AddResources(int amount)
    {
        resources += amount;
        if (resourceCounterUI != null)
            resourceCounterUI.SetResource(resources);
    }

    public bool SpendResources(int amount)
    {
        if (resources >= amount)
        {
            resources -= amount;
            if (resourceCounterUI != null)
                resourceCounterUI.SetResource(resources);
            return true;
        }
        return false;
    }

    public int GetResources()
    {
        return resources;
    }

    // -----------------------------
    // GAME STATE MANAGEMENT
    // -----------------------------

    public void GameOver()
    {
        isGameOver = true;
        // Show game over UI, stop spawning, etc.
        if (gameOverUI != null)
            gameOverUI.Show("Game Over!");
        Debug.Log("Game Over!");
    }

    public bool IsGameOver()
    {
        return isGameOver;
    }

    // -----------------------------
    // PAUSE & RESTART (OPTIONAL)
    // -----------------------------

    public void TogglePause()
    {
        if (isPaused)
        {
            ResumeGame();
        }
        else
        {
            PauseGame();
        }
    }

    public void PauseGame()
    {
        isPaused = true;
        Time.timeScale = 0f;
        if (pauseMenuUI != null)
            pauseMenuUI.Show();
    }

    public void ResumeGame()
    {
        isPaused = false;
        Time.timeScale = 1f;
        if (pauseMenuUI != null)
            pauseMenuUI.Hide();
    }

    public void RestartGame()
    {
        // Resume time scale before restarting
        Time.timeScale = 1f;
        // Reload the current scene
        UnityEngine.SceneManagement.SceneManager.LoadScene(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);
    }

    public bool IsPaused()
    {
        return isPaused;
    }

    // Call this when the tower takes damage or is healed:
    // if (towerHealthBar != null) towerHealthBar.SetHealth(currentHealth, maxHealth);

    // Call this when the defender cost changes:
    // if (defenderCostUI != null) defenderCostUI.SetCost(defenderCost);
} 